package data;

import java.io.FileOutputStream;
import java.util.Date;
import data.User;

import dblib.MD5;
import dblib.SQLUser;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Image;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import data.Register;

public class PDFPrinter {

	private static String FILE = "./receipt_"+ new Date() +".pdf";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);


	public PDFPrinter( Reserve message, boolean translate, Register register_food, 
			Register register_transport, Register register_destiny, Register temp_register ) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			addTitlePage(document, translate, register_food, register_transport, register_destiny, temp_register);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private static void addMetaData(Document document) {
		document.addTitle("Receipt");
		document.addSubject("Nopheca");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Nocheca");
		document.addCreator("Nocheca");
	}

	private static void addTitlePage(Document document, boolean translate, Register register_food, 
			Register register_transport, Register register_destiny, Register temp_register ) throws DocumentException {
		double price1, price2, price3;
		if( register_food != null )
			price1 = register_food.getPrice();
		else
			price1 = 0;

		if( register_transport != null )
			price2 = register_transport.getPrice();
		else
			price2 = 0;

		if( register_destiny != null )
			price3 = register_destiny.getPrice();
		else
			price3 = 0;
		double total = temp_register.getPrice() + price1 + price2 + price3;

		Paragraph preface = new Paragraph();
		addEmptyLine(preface, 1);
		User activeUser = SQLUser.getActive();
		if( translate )
			preface.add(new Paragraph("RECEIPT \n YOU MUST PRESERVE THIS TO VALIDATE YOUR RESERVATION", catFont));
		else
			preface.add(new Paragraph("RECIBO \n DEBE GUARDAR ESTE ARCHIVO PARA VALIDAR SU RESERVA", catFont));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph(activeUser.getName() + " " + activeUser.getLastname() + " " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
					smallBold));
		preface.add( new Paragraph( activeUser.getEmail() ) );
		if( translate )
			preface.add( new Paragraph( "From: " + temp_register.getIn_date() + "   " + "To: " + temp_register.getOut_date()));
		else
			preface.add( new Paragraph( "Desde: " + temp_register.getIn_date() + "   " + "Hasta: " + temp_register.getOut_date()));
		if( translate && register_destiny != null )
			preface.add( new Paragraph( "The day of the event is: " + register_destiny.getIn_date() ) );
		else if( register_destiny != null )
			preface.add( new Paragraph( "El dia del evento es: " + register_destiny.getIn_date() ) );
		addEmptyLine(preface, 3);
		createTable( preface, translate, register_food, register_transport, register_destiny, temp_register );
		preface.add( new Paragraph( "Total: $" + String.format( "%.2f", total), catFont ) );
		addEmptyLine(preface, 2);
		preface.add( new Paragraph(MD5.encrypt(activeUser.getEmail())));
		document.add(preface);
		// Start a new page
	}

	private static void createTable(Paragraph subCatPart, boolean translate, Register register_food, 
			Register register_transport, Register register_destiny, Register temp_register ) throws BadElementException {
		PdfPTable table = new PdfPTable(6);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Id"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Item"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Descr"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		if( translate )
			c1 = new PdfPCell(new Phrase("Adults"));
		else
			c1 = new PdfPCell(new Phrase("Adultos"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		if( translate )
			c1 = new PdfPCell(new Phrase("Kids"));
		else
			c1 = new PdfPCell(new Phrase("Ni√±os"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		if( translate )
			c1 = new PdfPCell(new Phrase("Price"));
		else
			c1 = new PdfPCell(new Phrase("Precio"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		table.setHeaderRows(1);

		table.addCell( "" + temp_register.getItemid() );
		table.addCell( temp_register.getItem() );
		table.addCell( temp_register.getDescription() );
		table.addCell( "" + temp_register.getAdults() );
		table.addCell( "" + temp_register.getKids() );
		table.addCell( "$" + temp_register.getPrice() );

		if( register_food != null ){
			table.addCell( "" + register_food.getItemid() );
			table.addCell( register_food.getItem() );
			table.addCell( register_food.getDescription() );
			table.addCell( "" + register_food.getAdults() );
			table.addCell( "" + register_food.getKids() );
			table.addCell( "$" + register_food.getPrice() );
		}

		if( register_transport != null ){
			table.addCell( "" + register_transport.getItemid() );
			table.addCell( register_transport.getItem() );
			table.addCell( register_transport.getDescription() );
			table.addCell( "" + register_transport.getAdults() );
			table.addCell( "" + register_transport.getKids() );
			table.addCell( "$" + register_transport.getPrice() );
		}

		if( register_destiny != null ){
			table.addCell( "" + register_destiny.getItemid() );
			table.addCell( register_destiny.getItem() );
			table.addCell( register_destiny.getDescription() );
			table.addCell( "" + register_destiny.getAdults() );
			table.addCell( "" + register_destiny.getKids() );
			table.addCell( "$" + register_destiny.getPrice() );
		}

		subCatPart.add(table);

	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
